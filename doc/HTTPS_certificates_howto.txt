CREATING HTTPS CERTIFICATES TO USE WITH CMS (SS AND RWS)
========================================================


ScoringService and RankingWebServer allow you to use HTTPS to secure
the communication between them. To do this you need to enable HTTPS in
RWS by setting, in the config, 'https_port' to a non null value (the
default port for HTTPS is 443, but you'll probably need to start RWS
as root to use it) and 'https_certfile' and 'https_keyfile' to the
files containing respectively the certificate and its private key.
Then, in the CMS config, you have to tell which RWSs use HTTPS by
setting the first element of their corresponding "tuple" in
"rankings_address" to "https" (instead of "http").
Finally, you have to tell SS which certificates to trust by setting
"https_certfile" (in the config) to a file that contains them all.


For a more in-depth discussion about certificates see:
http://docs.python.org/library/ssl.html#ssl-certificates


Let's now see how to generate certificates.


CREATE A SELF-SIGNED CERTIFICATE
-------------------------------

First, we start by generating a RSA private key for the certificate:

  openssl genrsa -out root.key 1024

Then, we generate a Certificate Signing Request (CSR):

  openssl req -new -key root.key -out root.csr -utf8

  (you will be prompted to enter the details of the certificate)

Finally, we use our key to sign the CSR and produce a certificate:

  openssl x509 -req -in root.csr -signkey root.key -out root.crt

We can now remove the CSR:

  rm root.csr

You can now use 'root.crt' and 'root.key' repectively as a certificate
and as its private key.

If you plan to use this key as a Certificate Authority (see below)
please add the '-extensions v3_ca' option to the 'x509' command.


CREATE A CERTIFICATE SIGNED BY A CERTIFICATE AUTHORITY
------------------------------------------------------

Suppose you now have a (possibly self-signed) certificate that you want
to use as a Certificate Authority, that is you want to produce new
certificates signed by your one. This is useful because everyone who
trusts your certificate (let's call it 'root') will also trust the
certificates signed by it.

We'll now proceed to generate a new certificate and private key, called
'server.crt' and 'server.key' respectively.

Generate the RSA private key for the certificate

  openssl genrsa -out server.key 1024

Create a CSR:

  openssl req -new -key server.key -out server.csr -utf8

Use your Certification Authority (CA) to sign it and create an actual
certificate:

  openssl x509 -req -in server.csr -extensions v3_usr -out server.crt \
      -CA root.crt -CAkey root.key -set_serial <serial>

  (choose a serial number arbitrarly, possibly a new, different one
   for each certificate you create)

Remove the CSR:

  rm server.csr


You now have 'server.crt' and 'server.key' ready to use. You may want
to append 'root.crt' to 'server.crt' to create a certificate chain.


VALIDTY
-------

By default your certificates will only be valid for 30 days after their
creation. You can change this by using an explicit '-days' option in
your 'x509' commands.


INSPECTION
----------

To view details about certificates you can use the following command:

  openssl x509 -in root.crt -noout -text


OPENSSL CA
----------

The 'openssl ca' command is an alternative way to generate CA-signed
certificates. It won't be discussed in depth.

First, you need to setup the working directory. Copy the 'openssl.cnf'
file that you find together with this explanation in it and run:

  echo "01" > serial
  touch index.txt


Then, to create a CA root certificate and to sign other CSRs, use:

  openssl genrsa -out root.key 1024

  openssl req -new -key root.key -out root.csr -utf8

  openssl ca -config openssl.cnf -selfsign -in root.csr -out root.crt

  rm root.csr

  openssl genrsa -out server.key 1024

  openssl req -new -key server.key -out server.csr -utf8

  openssl ca -config openssl.cnf -in server.csr -out server.crt

  rm server.csr
