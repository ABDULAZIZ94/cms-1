*** Database
* Define appropriate UNIQUE indexes in the database.
* Task and Testcase are sometimes referenced by num, instead of
  properly using IDs.
* Decide where and how to keep tries number for evaluations.
* Rename token_timestamp -> token.
* Why do we have testcases and public_testcases? This is totally
  nonsense, we should add a public bit in testcases.

*** Worker
* Should be able to work with 32-bit programs even when running in 64-bit mode.
* Investigate why pressing keys on Worker seems to impact
  the result of an ongoing mo-box.

*** EvaluationServer
* Check that there are no concurrence issues, particularly in scoring
  routines.
* When starting, ask the workers to preload the contest's files.

*** ContestWebServer
* It _MUST_ be able to work correctly (storing submitted data) even if
  no services other than the database and FileStorage are available;
  if database or File Storage are missing it _MUST_ behave nicely
  anyway, informing the user to seek assistance and without crashing.
* Localization (task statements, but also interface).

*** Task types
* Check that white_diff() really does what we want it to do

*** Score types
* Fix ScoreTypeRelative, which at the moment still use the deprecated
  Submission.score field.

*** YamlImporter
* Provide facilities to translate the task's statement.
* Provide an environment to build tasks better than make_Makefile and friends.

*** Contest{Exporter,Importer}
* Use consistenly names to export Tasks, as in the cases of Users.
* After importing, check that all needed files are actually present.

*** File{Storage,Cacher}
* Don't load the whole files when transferring them, you uselessly eat
  a huge lot of memory.
* The current implementation is very confused and probably quite
  prone to errors; try to make it a bit simpler.
* Add support to optionally check file digests when trasferring them, both
  on client and on server side. Moreover, add an API call to ask the
  server to verify some file's digest.

