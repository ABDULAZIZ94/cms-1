*** Database
* Define appropriate UNIQUE indexes in the database.
* Task and Testcase are sometimes referenced by num, instead of
  properly using IDs.
* It may be interesting to keep in the Contest not only the last
  scoring snapshot, but a snapshot for each moments in which the
  scorings change.

*** Worker
* Should be able to work with 32-bit programs even when running in 64-bit mode.

*** EvaluationServer
* Check that there are no concurrence issues, particularly in scoring
  routines.
* When starting, check that the workers are not doing anything and
  possibly stop them / wait for them to be finished.

*** ContestWebServer
* It _MUST_ be able to work correctly (storing submitted data) even if
  no services other than the database and FileStorage are available;
  if database or File Storage are missing it _MUST_ behave nicely
  anyway, informing the user to seek assistance and without crashing.
* Localization (task statements, but also interface).
* Some idea to improve the Web interface:
  - Ability to show submitted files from the Web interface without
    having to download them, possibly coloring the syntax.
  - Ability to backup files.
  - Ability to talk with Emacs psychologist, in case of a particularly
    difficult contest.
  - Put an Italian flag somewhere.
  - I think that the AGPL license also asks us to put appropriate
    copyright notices in the Web interface.
  - Add some indicator on the left side bar when there are new messages,
    replies or annoncements. The yellow notification is useful, but
    could go unnoticed.

*** Task types
* Check that white_diff() really does what we want it to do

*** YamlImporter
* Provide facilities to translate the task's statement.
* Provide an environment to build tasks better than make_Makefile and
  friends.

*** Contest{Exporter,Importer}
* Use consistenly names to export Tasks, as in the cases of Users.

*** File{Storage,Cacher}
* Don't load the whole files when transferring them, you uselessly eat
  a huge lot of memory (this requires changes in the AsyncLibrary).
* The current implementation is very confused and probably quite
  prone to errors; try to make it a bit simpler.
* Add support to optionally check file digests when trasferring them, both
  on client and on server side. Moreover, add an API call to ask the
  server to verify some file's digest.

*** AsyncLibrary
* Merge the two synchronous call supports available (one is built-in in
  AsyncLibrary, one is the sync_call function); the sync_call functions
  seems to have a better callback approach.

