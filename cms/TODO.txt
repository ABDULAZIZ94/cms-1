*** BLOCKERS



** Low priority

* Always refer to tasks, testcases and such by id instead of num (as
  it is for everything else).

* In the submissions list (both *WS), provide some fast way to see the
  result without open the fold. This should work with subtasks, but
  first we need to understand what are subtasks for us.




*** OTHERS



** Database

* MED: (Probably) useful to store scores once they are computed by
  ScoringService. This may be useful also for displaying reason
  (i.e. show to user/admins the score of a submission).

* LOW: Define appropriate UNIQUE indexes in the database.

* LOW: It may be interesting to keep in the Contest not only the last
  scoring snapshot, but a snapshot for each moments in which the
  scorings change.



** Worker

* LOW: Should be able to work with 32 bits programs even when running in
  64 bits mode.
  - This actually appears to be quite complicated: it is probably
    easier and more secure to just ask that everything must be made
    with the same number of bits; at the moment it is assumed that
    everything works at 32 bits. I have a 64 bits system and keep
    the Worker inside a 32 bits chroot.



** Task types

* HIGH: implement communication task types.

* LOW: ease the creation of new task types.



** ContestWebServer

* MED: concurrency: if there are more than 1 CWS, there is a (very
  slight) chance that feature such as - but not limited to - "partial
  submission filler" and "avoid frequent submissions" will not work as
  expected.

* LOW: ability to send not only zipped but also tarred submissions.

* LOW: Some idea to improve the Web interface:
  - Ability to backup files.
  - Ability to talk with Emacs psychologist, in case of a particularly
    difficult contest.
  - Put an Italian flag somewhere.
  - I think that the AGPL license also asks us to put appropriate
    copyright notices in the Web interface.



** AdminWebServer

* MED: when reevaluating, ask if we want to wipe everything, or only
  the evaluation, or only the scoring (in the case we implement the
  persistent scores in the db).

* MED: auto updating submission statuses.



** YamlImporter

* LOW: Provide facilities to translate the task's statement.

* LOW: Provide an environment to build tasks better than make_Makefile and
  friends.



** Contest{Exporter,Importer}

* LOW: Use consistenly names to export Tasks, as in the cases of Users.



** File{Storage,Cacher}

* LOW: Add support to optionally check file digests when trasferring them, both
  on client and on server side. Moreover, add an API call to ask the
  server to verify some file's digest.



** AsyncLibrary

* MED: Decide on bind_obj=None behaviour and about keeping bind_obj.



** setup.py

* LOW: Add pyjamas building of ranking and installing the scripts.


** Irene

* MED: Find out why Irene takes so much CPU resources.

