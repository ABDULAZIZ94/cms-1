To run this example, open four terminals, and run these programs:

./Checker
./ServiceA.py
./ServiceB.py 0
./ServiceB.py 1
./WebServiceA.py

You can try to start one of them with the other switched off, or
simulate busyness of a service by interrupting it (Ctrl-S and Ctrl-Q
on the terminal).

ServiceB (0 and 1) only listen for RPC requests. ServiceA ask for echo
to both ServiceBs every 10 seconds, and ask to ServiceB,0 for the file
aaa (just once). Checker evaluates the response time of all services
(included itself).

Finally, WebServiceA listen at port 9999 and the root page makes the
client ask for two methods of ServiceB,1.

Modify the INFO to DEBUG in Util.py to show all methods in the logs.


Example: calls trace for A calling B's echo

*** STARTING B
B 0.000    DEBUG ServiceB.__init__
B 0.001    DEBUG Service.__init__
B 0.001    DEBUG ListeningSocket.__init__
B 0.002    DEBUG Service.run

*** STARTING A
A 1.000    DEBUG ServiceA.__init__
A 1.000    DEBUG Service.__init__
A 1.001    DEBUG ListeningSocket.__init__

*** A initialize the channel to B, that acks and initializes a channel too
A 1.001    DEBUG RemoteService.__init__
A 1.002    DEBUG RemoteService.connect_remote_service
B 1.005    DEBUG ListeningSocket.handle_accept
B 1.009    DEBUG RemoteService.__init__
B 1.009    DEBUG RemoteService._initialize_channel
A 1.010    DEBUG RemoteService._initialize_channel

*** A starts its loop and ask for B's echo
A 1.011    DEBUG Service.run
A 1.037    DEBUG ServiceA.ask_for_echo
A 1.038     INFO Asking ServiceB,1 for echo...
A 1.040    DEBUG RemoteService.__getattr__(echo)
A 1.041    DEBUG RemoteService.execute_rpc

*** A initialize the request and push it in the channel
A 1.041    DEBUG RPCRequest.__init__
A 1.041    DEBUG RPCRequest.pre_execute
A 1.042    DEBUG RemoteService._push_right

*** B receives data and terminator, and interprets the message
B 1.045    DEBUG RemoteService.collect_incoming_data
B 1.045    DEBUG RemoteService.found_terminator
B 1.046    DEBUG Service.handle_message

*** B executes the requested methods and push the response in the channel
B 1.047    DEBUG ServiceB.echo
B 1.047     INFO Echo received.
B 1.048    DEBUG RemoteService._push_right

*** A receives the message, and callsthe callback
A 1.049    DEBUG RemoteService.collect_incoming_data
A 1.050    DEBUG RemoteService.found_terminator
A 1.051    DEBUG Service.handle_rpc_response
A 1.051    DEBUG RPCRequest.complete
A 1.052    DEBUG ServiceA.echo_callback
A 1.052     INFO ServiceB,1 answered 1.04

